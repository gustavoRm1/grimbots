"""
An√°lise de Leads Perdidos Durante o Crash
==========================================
Verifica quantos /start aconteceram durante o per√≠odo do erro
e quantos usu√°rios foram realmente salvos.

EXECUTAR:
---------
cd /root/grimbots
source venv/bin/activate
python check_lost_leads.py
"""

from app import app, db
from models import Bot, BotUser
from datetime import datetime, timedelta
import sys

def analyze_lost_leads():
    """Analisa impacto do crash nos leads"""
    
    with app.app_context():
        print("=" * 80)
        print("üîç AN√ÅLISE DE LEADS PERDIDOS")
        print("=" * 80)
        print()
        
        # Per√≠odo do crash (ajustar conforme logs)
        # Oct 20 14:46:53 = hoje √†s 14:46
        crash_time = datetime(2025, 10, 20, 14, 46)
        now = datetime.now()
        
        print(f"üìÖ Per√≠odo analisado:")
        print(f"   In√≠cio do crash: {crash_time.strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"   Agora: {now.strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"   Dura√ß√£o: {(now - crash_time).total_seconds() / 60:.1f} minutos")
        print()
        
        # Listar todos os bots ativos
        active_bots = Bot.query.filter_by(is_active=True).all()
        
        print(f"ü§ñ Bots ativos: {len(active_bots)}")
        print()
        
        total_users_during_crash = 0
        
        for bot in active_bots:
            # Usu√°rios que tentaram interagir durante o crash
            # (s√≥ conseguimos ver os que FORAM salvos ANTES do crash)
            users_before_crash = BotUser.query.filter(
                BotUser.bot_id == bot.id,
                BotUser.first_interaction < crash_time
            ).count()
            
            users_after_fix = BotUser.query.filter(
                BotUser.bot_id == bot.id,
                BotUser.first_interaction >= crash_time
            ).count()
            
            total_users = BotUser.query.filter_by(bot_id=bot.id).count()
            
            print(f"üìä {bot.name} (@{bot.username})")
            print(f"   Usu√°rios antes do crash: {users_before_crash}")
            print(f"   Usu√°rios ap√≥s o fix: {users_after_fix}")
            print(f"   Total: {total_users}")
            
            if users_after_fix > 0:
                print(f"   ‚úÖ Bot voltou a funcionar - {users_after_fix} novos usu√°rios")
            
            print()
        
        print("=" * 80)
        print("‚ö†Ô∏è REALIDADE DURA:")
        print("=" * 80)
        print()
        print("‚ùå Usu√°rios que enviaram /start durante o crash N√ÉO foram salvos.")
        print("‚ùå Telegram n√£o guarda fila de mensagens quando bot falha.")
        print("‚ùå N√£o h√° como recuperar automaticamente.")
        print()
        print("=" * 80)
        print("üí° SOLU√á√ÉO DE RECUPERA√á√ÉO:")
        print("=" * 80)
        print()
        print("1. TR√ÅFEGO PAGO:")
        print("   ‚Ä¢ Aumente budget temporariamente (+30-50%)")
        print("   ‚Ä¢ Compense os leads perdidos com mais tr√°fego")
        print()
        print("2. REMARKETING NO FACEBOOK/GOOGLE:")
        print("   ‚Ä¢ Pessoas que clicaram no link mas n√£o converteram")
        print("   ‚Ä¢ Use pixel/analytics para criar p√∫blico")
        print()
        print("3. BROADCAST PARA USU√ÅRIOS ANTIGOS:")
        print("   ‚Ä¢ Se tinha usu√°rios de antes do crash")
        print("   ‚Ä¢ Envie campanha de reengajamento")
        print()
        print("4. POSTS EM GRUPOS/CANAIS:")
        print("   ‚Ä¢ Se voc√™ tem grupos relacionados")
        print("   ‚Ä¢ Reposte o link do bot")
        print()
        print("5. MONITORE O SISTEMA:")
        print("   ‚Ä¢ Configure alertas (pm2-slack, discord webhook)")
        print("   ‚Ä¢ Nunca mais fique tanto tempo offline")
        print()

if __name__ == '__main__':
    try:
        analyze_lost_leads()
    except Exception as e:
        print(f"‚ùå ERRO: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)

