#!/usr/bin/env python3
"""
üîç DIAGN√ìSTICO COMPLETO: Meta Pixel Purchase Events
An√°lise rigorosa de TODOS os pools e vendas
"""

import os
import sys
from datetime import datetime, timedelta

sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from app import app, db
from models import Payment, PoolBot

with app.app_context():
    print("=" * 80)
    print("üîç DIAGN√ìSTICO COMPLETO: Meta Pixel Purchase Events")
    print("=" * 80)
    
    # 1. TODAS as vendas de HOJE (qualquer gateway)
    hoje = datetime.now().replace(hour=0, minute=0, second=0, microsecond=0)
    
    todos_pagamentos_hoje = Payment.query.filter(
        Payment.status == 'paid',
        Payment.paid_at >= hoje
    ).all()
    
    print(f"\n1Ô∏è‚É£ TODAS AS VENDAS HOJE: {len(todos_pagamentos_hoje)}")
    
    sem_meta = []
    com_meta = []
    sem_pool = []
    
    for p in todos_pagamentos_hoje:
        pool_bot = PoolBot.query.filter_by(bot_id=p.bot_id).first()
        if not pool_bot:
            sem_pool.append(p)
            continue
            
        if not p.meta_purchase_sent:
            sem_meta.append(p)
        else:
            com_meta.append(p)
    
    print(f"   ‚ùå SEM Meta Purchase: {len(sem_meta)}")
    print(f"   ‚úÖ COM Meta Purchase: {len(com_meta)}")
    print(f"   ‚ö†Ô∏è SEM Pool: {len(sem_pool)}")
    
    # 2. An√°lise por POOL
    print(f"\n2Ô∏è‚É£ AN√ÅLISE POR POOL:")
    # Buscar pools via PoolBot (todos os pools que t√™m bots)
    from sqlalchemy import distinct
    pool_ids = db.session.query(distinct(PoolBot.pool_id)).all()
    pool_ids = [pid[0] for pid in pool_ids]
    
    # Importar RedirectPool dinamicamente
    from models import RedirectPool
    pools = RedirectPool.query.filter(RedirectPool.id.in_(pool_ids)).all() if pool_ids else []
    
    for pool in pools:
        # Buscar bots do pool
        pool_bots = [pb.bot_id for pb in PoolBot.query.filter_by(pool_id=pool.id).all()]
        
        # Vendas de hoje deste pool
        vendas_pool = Payment.query.filter(
            Payment.status == 'paid',
            Payment.paid_at >= hoje,
            Payment.bot_id.in_(pool_bots) if pool_bots else False
        ).all()
        
        sem_meta_pool = [p for p in vendas_pool if not p.meta_purchase_sent]
        
        print(f"\n   üìä Pool: {pool.name} (ID: {pool.id})")
        print(f"      Total vendas hoje: {len(vendas_pool)}")
        print(f"      SEM Meta Purchase: {len(sem_meta_pool)}")
        print(f"      ‚úÖ COM Meta Purchase: {len(vendas_pool) - len(sem_meta_pool)}")
        
        # Configura√ß√£o do pool
        print(f"      Tracking: {pool.meta_tracking_enabled}")
        print(f"      Purchase: {pool.meta_events_purchase}")
        print(f"      Pixel ID: {'‚úÖ' if pool.meta_pixel_id else '‚ùå'}")
        print(f"      Access Token: {'‚úÖ' if pool.meta_access_token else '‚ùå'}")
        
        if sem_meta_pool:
            print(f"\n      ‚ö†Ô∏è Pagamentos SEM Meta Purchase:")
            for p in sem_meta_pool[:5]:
                print(f"         - Payment {p.id} ({p.payment_id}) | R$ {p.amount:.2f} | Paid: {p.paid_at.strftime('%H:%M:%S')}")
            
            # Verificar por que n√£o foi enviado
            if not pool.meta_tracking_enabled:
                print(f"      ‚ùå PROBLEMA: Tracking DESABILITADO no pool!")
            if not pool.meta_events_purchase:
                print(f"      ‚ùå PROBLEMA: Evento Purchase DESABILITADO no pool!")
            if not pool.meta_pixel_id:
                print(f"      ‚ùå PROBLEMA: Pixel ID N√ÉO CONFIGURADO!")
            if not pool.meta_access_token:
                print(f"      ‚ùå PROBLEMA: Access Token N√ÉO CONFIGURADO!")
    
    # 3. An√°lise temporal (quando foi pago vs quando deveria ter sido enviado)
    print(f"\n3Ô∏è‚É£ AN√ÅLISE TEMPORAL:")
    agora = datetime.now()
    
    for p in sem_meta[:10]:
        tempo_desde_pagamento = (agora - p.paid_at).total_seconds() / 3600  # horas
        print(f"   Payment {p.id}: Pago h√° {tempo_desde_pagamento:.1f}h | {p.paid_at.strftime('%H:%M:%S')}")
    
    # 4. Verificar se fun√ß√£o foi chamada (via logs indiretos)
    print(f"\n4Ô∏è‚É£ VERIFICA√á√ïES DE LOGS:")
    print(f"   üìã Execute para ver se fun√ß√£o foi chamada:")
    print(f"      sudo journalctl -u grimbots --since 'today' | grep -E 'Meta Pixel Purchase disparado|Purchase enfileirado' | tail -20")
    print(f"   üìã Execute para ver erros no Celery:")
    print(f"      sudo journalctl -u celery --since 'today' | grep -E 'FAILED|ERROR|Purchase' | tail -20")
    
    # 5. Resumo cr√≠tico
    print(f"\n5Ô∏è‚É£ RESUMO CR√çTICO:")
    print(f"   ‚ö†Ô∏è {len(sem_meta)} venda(s) SEM Meta Purchase de {len(todos_pagamentos_hoje)} total")
    print(f"   üìä Taxa de sucesso: {((len(com_meta) / len(todos_pagamentos_hoje)) * 100) if todos_pagamentos_hoje else 0:.1f}%")
    
    if sem_meta:
        print(f"\n   üîß A√á√ÉO IMEDIATA:")
        print(f"      python reenviar_meta_purchase.py")
        print(f"   ‚ö†Ô∏è CR√çTICO: Isso afeta otimiza√ß√£o de campanhas Meta Ads!")
    
    print("\n" + "=" * 80)
    print("‚úÖ Diagn√≥stico completo conclu√≠do!")
    print("=" * 80)

