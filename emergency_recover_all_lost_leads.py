"""
RECUPERA√á√ÉO EMERGENCIAL - TODOS OS LEADS PERDIDOS
==================================================
Envia mensagem de boas-vindas para TODOS os usu√°rios que:
1. Est√£o no banco mas nunca receberam mensagem (welcome_sent=False)
2. OU foram criados recentemente mas sem intera√ß√£o completa

EXECUTAR IMEDIATAMENTE:
-----------------------
cd /root/grimbots
source venv/bin/activate
python emergency_recover_all_lost_leads.py --execute

ATEN√á√ÉO: Use --dry-run primeiro para ver quantos ser√£o recuperados
"""

import sys
import time
import requests
import logging
import argparse
from datetime import datetime, timedelta
from app import app, db
from models import Bot, BotUser, BotConfig

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def send_telegram_message(bot_token, chat_id, text, buttons=None):
    """Envia mensagem via API do Telegram"""
    url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
    
    payload = {
        'chat_id': chat_id,
        'text': text,
        'parse_mode': 'Markdown'
    }
    
    if buttons:
        keyboard = {'inline_keyboard': []}
        row = []
        for btn in buttons:
            if 'url' in btn:
                row.append({'text': btn['text'], 'url': btn['url']})
            elif 'callback_data' in btn:
                row.append({'text': btn['text'], 'callback_data': btn['callback_data']})
            
            if len(row) == 2:  # 2 bot√µes por linha
                keyboard['inline_keyboard'].append(row)
                row = []
        
        if row:  # Adicionar √∫ltima linha
            keyboard['inline_keyboard'].append(row)
        
        payload['reply_markup'] = keyboard
    
    try:
        response = requests.post(url, json=payload, timeout=15)
        result = response.json()
        return result.get('ok', False), result
    except Exception as e:
        logger.error(f"Erro ao enviar mensagem: {e}")
        return False, {'error': str(e)}

def send_media_message(bot_token, chat_id, media_url, media_type, caption=None, buttons=None):
    """Envia m√≠dia (foto/v√≠deo) via Telegram"""
    if media_type == 'photo':
        url = f"https://api.telegram.org/bot{bot_token}/sendPhoto"
        payload = {'chat_id': chat_id, 'photo': media_url}
    else:
        url = f"https://api.telegram.org/bot{bot_token}/sendVideo"
        payload = {'chat_id': chat_id, 'video': media_url}
    
    if caption:
        payload['caption'] = caption
        payload['parse_mode'] = 'Markdown'
    
    if buttons:
        keyboard = {'inline_keyboard': []}
        row = []
        for btn in buttons:
            if 'url' in btn:
                row.append({'text': btn['text'], 'url': btn['url']})
            elif 'callback_data' in btn:
                row.append({'text': btn['text'], 'callback_data': btn['callback_data']})
            
            if len(row) == 2:
                keyboard['inline_keyboard'].append(row)
                row = []
        
        if row:
            keyboard['inline_keyboard'].append(row)
        
        payload['reply_markup'] = keyboard
    
    try:
        response = requests.post(url, json=payload, timeout=30)
        result = response.json()
        return result.get('ok', False), result
    except Exception as e:
        logger.error(f"Erro ao enviar m√≠dia: {e}")
        return False, {'error': str(e)}

def recover_lost_leads(hours_back=24, dry_run=True):
    """
    Recupera leads perdidos das √∫ltimas X horas
    
    Args:
        hours_back: Quantas horas para tr√°s procurar
        dry_run: Se True, apenas simula (n√£o envia mensagens)
    """
    
    with app.app_context():
        cutoff_time = datetime.now() - timedelta(hours=hours_back)
        
        print("=" * 80)
        print(f"üö® RECUPERA√á√ÉO EMERGENCIAL DE LEADS")
        print("=" * 80)
        print(f"\nüìÖ Per√≠odo: √öltimas {hours_back} horas")
        print(f"‚è∞ Desde: {cutoff_time.strftime('%Y-%m-%d %H:%M:%S')}")
        
        if dry_run:
            print(f"‚ö†Ô∏è  MODO DRY RUN - Apenas simula√ß√£o\n")
        else:
            print(f"üî¥ MODO EXECU√á√ÉO - Mensagens ser√£o enviadas!\n")
        
        # Buscar todos os usu√°rios que NUNCA receberam boas-vindas
        # OU foram criados recentemente mas welcome_sent=False
        lost_users = BotUser.query.filter(
            BotUser.welcome_sent == False,
            BotUser.first_interaction >= cutoff_time,
            BotUser.archived == False
        ).order_by(BotUser.first_interaction.desc()).all()
        
        print(f"üìä LEADS PERDIDOS ENCONTRADOS: {len(lost_users)}")
        
        if len(lost_users) == 0:
            print("\n‚úÖ Nenhum lead perdido! Sistema est√° OK.")
            return
        
        # Agrupar por bot
        leads_by_bot = {}
        for user in lost_users:
            if user.bot_id not in leads_by_bot:
                leads_by_bot[user.bot_id] = []
            leads_by_bot[user.bot_id].append(user)
        
        print(f"\nüìã Distribui√ß√£o por bot:")
        for bot_id, users in leads_by_bot.items():
            bot = Bot.query.get(bot_id)
            bot_name = bot.name if bot else f"Bot {bot_id}"
            print(f"   ‚Ä¢ {bot_name}: {len(users)} leads")
        
        print("\n" + "=" * 80)
        print("üöÄ INICIANDO RECUPERA√á√ÉO")
        print("=" * 80 + "\n")
        
        total_sent = 0
        total_failed = 0
        total_blocked = 0
        
        for bot_id, users in leads_by_bot.items():
            bot = Bot.query.get(bot_id)
            
            if not bot:
                print(f"‚ö†Ô∏è  Bot {bot_id} n√£o encontrado, pulando...")
                continue
            
            if not bot.is_active:
                print(f"‚ö†Ô∏è  Bot {bot.name} est√° inativo, pulando...")
                continue
            
            config = bot.config
            if not config:
                print(f"‚ö†Ô∏è  Bot {bot.name} sem configura√ß√£o, pulando...")
                continue
            
            print(f"\n{'='*80}")
            print(f"ü§ñ Bot: {bot.name} (@{bot.username})")
            print(f"   Leads para recuperar: {len(users)}")
            print(f"{'='*80}\n")
            
            # Preparar mensagem e bot√µes
            welcome_msg = config.welcome_message or "Ol√°! Bem-vindo!"
            welcome_media = config.welcome_media_url
            welcome_media_type = config.welcome_media_type or 'video'
            
            # Bot√µes
            buttons = []
            main_buttons = config.get_main_buttons()
            redirect_buttons = config.get_redirect_buttons()
            
            for idx, btn in enumerate(main_buttons):
                if btn.get('text') and btn.get('price'):
                    buttons.append({
                        'text': btn['text'],
                        'callback_data': f"buy_{idx}"
                    })
            
            for btn in redirect_buttons:
                if btn.get('text') and btn.get('url'):
                    buttons.append({
                        'text': btn['text'],
                        'url': btn['url']
                    })
            
            # Enviar para cada usu√°rio
            for idx, user in enumerate(users, 1):
                print(f"[{idx}/{len(users)}] {user.first_name} (@{user.username or 'sem username'}) | ID: {user.telegram_user_id}")
                
                if dry_run:
                    print(f"         [DRY RUN] Enviaria mensagem de boas-vindas")
                    continue
                
                # Tentar enviar
                try:
                    success = False
                    error_msg = None
                    
                    # Tentar com m√≠dia se configurada
                    if welcome_media and '/c/' not in welcome_media:
                        success, result = send_media_message(
                            bot.token,
                            user.telegram_user_id,
                            welcome_media,
                            welcome_media_type,
                            welcome_msg,
                            buttons
                        )
                        
                        if not success:
                            # Falhou com m√≠dia, tentar s√≥ texto
                            success, result = send_telegram_message(
                                bot.token,
                                user.telegram_user_id,
                                welcome_msg,
                                buttons
                            )
                    else:
                        # Sem m√≠dia, direto texto
                        success, result = send_telegram_message(
                            bot.token,
                            user.telegram_user_id,
                            welcome_msg,
                            buttons
                        )
                    
                    if success:
                        # Marcar como enviado no banco
                        user.welcome_sent = True
                        user.welcome_sent_at = datetime.now()
                        db.session.commit()
                        
                        print(f"         ‚úÖ Enviado e marcado como welcome_sent=True")
                        total_sent += 1
                    else:
                        error_desc = result.get('description', 'Erro desconhecido')
                        
                        # Verificar se bloqueou o bot
                        if 'blocked' in error_desc.lower() or 'bot was blocked' in error_desc.lower():
                            print(f"         üö´ Usu√°rio bloqueou o bot")
                            total_blocked += 1
                            # Marcar como enviado para n√£o tentar de novo
                            user.welcome_sent = True
                            user.welcome_sent_at = datetime.now()
                            db.session.commit()
                        else:
                            print(f"         ‚ùå Falhou: {error_desc}")
                            total_failed += 1
                    
                    # Rate limiting (n√£o bombardear Telegram)
                    time.sleep(0.05)  # 50ms entre mensagens = 20 msg/s (dentro do limite)
                    
                except Exception as e:
                    print(f"         ‚ùå Erro: {e}")
                    total_failed += 1
                    time.sleep(0.1)
        
        # Relat√≥rio final
        print("\n" + "=" * 80)
        print("üìä RELAT√ìRIO FINAL")
        print("=" * 80)
        print(f"\n‚úÖ Enviadas com sucesso: {total_sent}")
        print(f"‚ùå Falhadas: {total_failed}")
        print(f"üö´ Bloqueadas: {total_blocked}")
        print(f"üìä Total processado: {len(lost_users)}")
        
        if not dry_run:
            recovery_rate = (total_sent / len(lost_users) * 100) if len(lost_users) > 0 else 0
            print(f"\nüí∞ Taxa de recupera√ß√£o: {recovery_rate:.1f}%")
            print(f"üí∏ Leads recuperados: {total_sent}")
            
            if total_sent > 0:
                print(f"\nüéâ SUCESSO! {total_sent} leads recuperados e de volta ao funil!")
        
        print("\n" + "=" * 80 + "\n")

def main():
    parser = argparse.ArgumentParser(description='Recuperar leads perdidos')
    parser.add_argument('--hours', type=int, default=24, help='Horas para tr√°s (padr√£o: 24)')
    parser.add_argument('--execute', action='store_true', help='Executar de verdade (padr√£o: dry-run)')
    args = parser.parse_args()
    
    try:
        recover_lost_leads(
            hours_back=args.hours,
            dry_run=not args.execute
        )
    except KeyboardInterrupt:
        print("\n\n‚ùå Cancelado pelo usu√°rio")
        sys.exit(0)
    except Exception as e:
        print(f"\n‚ùå ERRO: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)

if __name__ == '__main__':
    main()

