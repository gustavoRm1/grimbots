# gateway_paradise.py
"""
Gateway de Pagamento: Paradise Pags (API V30 atualizada)
Documenta√ß√£o: Arquivos paradise.php e paradise.json fornecidos

Particularidades da API V30:
- Autentica√ß√£o via X-API-Key (Secret Key)
- Requer product_hash (c√≥digo do produto criado no Paradise)
- Requer checkoutUrl (novo campo obrigat√≥rio)
- Valores em CENTAVOS (amount)
- Split por VALOR FIXO em centavos (via store_id)
- Endpoint: https://multi.paradisepags.com/api/v1/transaction.php
- Webhook: https://multi.paradisepags.com/api/v1/check_status.php?hash={transaction_id}
- Resposta: {transaction: {id, qr_code, qr_code_base64, expires_at}}

Credenciais atualizadas:
- API Key: sk_c3728b109649c7ab1d4e19a61189dbb2b07161d6955b8f20b6023c55b8a9e722
- Product Hash: prod_6c60b3dd3ae2c63e
- Store ID: 177
"""

import requests
import logging
import random
from typing import Dict, Optional
from gateway_interface import PaymentGateway

logger = logging.getLogger(__name__)

# Pool de CPFs v√°lidos para fallback
VALID_CPFS = [
    '56657477007',
    '06314127513',
    '25214446772',
    '27998261321',
    '09553238602',
    '48317801896',
    '21540970817',
    '21996866900',
    '15721994746'
]


class ParadisePaymentGateway(PaymentGateway):
    """Implementa√ß√£o do gateway Paradise Pags"""
    
    def __init__(self, credentials: Dict[str, str]):
        """
        Inicializa o gateway Paradise (API V30 atualizada)
        
        Args:
            credentials: Dict com:
                - api_key: Secret Key do Paradise (sk_...)
                - product_hash: C√≥digo do produto (prod_...)
                - offer_hash: ID da oferta (extra√≠do da URL)
                - store_id: ID da conta para split (ex: "177")
                - split_percentage: Percentual de comiss√£o da plataforma (padr√£o 2%)
        """
        # ‚úÖ CREDENCIAIS ATUALIZADAS baseadas nos arquivos paradise.php e paradise.json
        self.api_key = credentials.get('api_key', 'sk_c3728b109649c7ab1d4e19a61189dbb2b07161d6955b8f20b6023c55b8a9e722')
        self.product_hash = credentials.get('product_hash', 'prod_6c60b3dd3ae2c63e')
        self.offer_hash = credentials.get('offer_hash', '')
        
        # ‚úÖ STORE ID DO SISTEMA (SPLIT DA PLATAFORMA) - N√ÉO DO USU√ÅRIO
        from os import environ
        self.store_id = environ.get('PARADISE_STORE_ID', '177')  # Store ID do dono do sistema
        
        # ‚úÖ CORRE√á√ÉO CR√çTICA: Validar split_percentage
        try:
            split_percentage = credentials.get('split_percentage', 2.0)
            self.split_percentage = float(split_percentage) if split_percentage is not None else 2.0
        except (ValueError, TypeError):
            logger.warning(f"‚ö†Ô∏è Paradise: split_percentage inv√°lido, usando padr√£o 2.0%")
            self.split_percentage = 2.0
        
        # URLs da API Paradise
        self.base_url = 'https://multi.paradisepags.com/api/v1'
        self.transaction_url = f'{self.base_url}/transaction.php'
        self.check_status_url = f'{self.base_url}/check_status.php'
        
        logger.info(f"üü£ Paradise Gateway inicializado | Product: {self.product_hash[:16]}... | Store: {self.store_id}")

    def get_gateway_name(self) -> str:
        return "Paradise Pags"
    
    def get_gateway_type(self) -> str:
        return "paradise"
    
    def get_webhook_url(self) -> str:
        from os import environ
        base_url = environ.get('WEBHOOK_URL', 'http://localhost:5000')
        return f"{base_url}/webhook/payment/paradise"
    
    def _get_dynamic_checkout_url(self, payment_id: int) -> str:
        """
        Gera URL de checkout din√¢mica baseada no ambiente
        """
        from os import environ
        base_url = environ.get('WEBHOOK_URL', 'http://localhost:5000')
        # Remove /webhook se presente e adiciona /payment
        if '/webhook' in base_url:
            base_url = base_url.replace('/webhook', '')
        return f"{base_url}/payment/{payment_id}"
    
    def _validate_phone(self, phone: str) -> str:
        """
        Valida e corrige n√∫mero de telefone para formato brasileiro
        """
        # Remove caracteres n√£o num√©ricos
        phone_digits = ''.join(filter(str.isdigit, str(phone)))
        
        # Se tem 11 d√≠gitos e come√ßa com 0, remove o 0
        if len(phone_digits) == 11 and phone_digits.startswith('0'):
            phone_digits = phone_digits[1:]
        
        # Se tem 10 d√≠gitos, adiciona 9 (celular)
        if len(phone_digits) == 10:
            phone_digits = '9' + phone_digits
        
        # Se ainda n√£o tem 11 d√≠gitos, usar padr√£o
        if len(phone_digits) != 11:
            phone_digits = '11999999999'
        
        return phone_digits
    
    def _validate_document(self, document: str) -> str:
        """
        Valida e corrige documento (CPF) para formato brasileiro
        """
        # Remove caracteres n√£o num√©ricos
        doc_digits = ''.join(filter(str.isdigit, str(document)))
        
        # Se tem 11 d√≠gitos, usar
        if len(doc_digits) == 11:
            return doc_digits
        
        # Se n√£o tem 11 d√≠gitos, usar CPF v√°lido aleat√≥rio
        return random.choice(VALID_CPFS)
    
    def verify_credentials(self) -> bool:
        """
        Verifica se as credenciais s√£o v√°lidas (API V30 atualizada)
        Paradise n√£o tem endpoint de verifica√ß√£o, ent√£o validamos localmente
        """
        try:
            # ‚úÖ Valida√ß√£o atualizada com credenciais padr√£o
            if not self.api_key or len(self.api_key) < 40:
                logger.error("‚ùå Paradise: api_key inv√°lida (deve ter 40+ caracteres)")
                return False
            
            if not self.api_key.startswith('sk_'):
                logger.error("‚ùå Paradise: api_key deve come√ßar com 'sk_'")
                return False
            
            if not self.product_hash or not self.product_hash.startswith('prod_'):
                logger.error("‚ùå Paradise: product_hash inv√°lido (deve come√ßar com 'prod_')")
                return False
            
            # ‚úÖ Store ID agora √© obrigat√≥rio para split
            if not self.store_id:
                logger.error("‚ùå Paradise: store_id √© obrigat√≥rio para split")
                return False
            
            if self.store_id and self.split_percentage > 0:
                logger.info(f"‚úÖ Paradise: Split configurado (Store {self.store_id} - {self.split_percentage}%)")
            
            logger.info(f"‚úÖ Paradise: Credenciais v√°lidas | Product: {self.product_hash} | Store: {self.store_id}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Paradise: Erro ao verificar credenciais: {e}")
            return False
    
    def generate_pix(self, amount: float, description: str, payment_id: int, customer_data: Optional[Dict] = None) -> Optional[Dict]:
        """
        Gera um c√≥digo PIX via Paradise (API V30 atualizada)
        
        Args:
            amount: Valor em reais (ex: 10.50)
            description: Descri√ß√£o do pagamento
            payment_id: ID do pagamento no banco local
            customer_data: Dados do cliente (opcional, n√£o usado pelo Paradise)
        
        Returns:
            Dict com pix_code, qr_code_url, transaction_id, payment_id
        """
        try:
            # ‚úÖ CORRE√á√ÉO CR√çTICA: Validar entrada antes de processar
            if not isinstance(amount, (int, float)) or amount <= 0:
                logger.error(f"‚ùå Paradise: Valor inv√°lido - deve ser n√∫mero positivo (recebido: {amount})")
                return None
            
            # Verificar NaN e infinito
            if isinstance(amount, float) and (amount != amount or amount == float('inf') or amount == float('-inf')):
                logger.error(f"‚ùå Paradise: Valor inv√°lido - NaN ou infinito (recebido: {amount})")
                return None
            
            if amount > 1000000:  # R$ 1.000.000 m√°ximo
                logger.error(f"‚ùå Paradise: Valor muito alto - m√°ximo R$ 1.000.000 (recebido: {amount})")
                return None
            
            # Paradise trabalha em CENTAVOS
            amount_cents = int(amount * 100)
            
            # Valida√ß√£o de valor m√≠nimo (ajustado para downsells)
            if amount_cents < 1:  # R$ 0,01 m√≠nimo
                logger.error(f"‚ùå Paradise: Valor m√≠nimo √© R$ 0,01 (recebido: {amount})")
                return None
            
            logger.info(f"üí∞ Paradise: Gerando PIX - R$ {amount:.2f} ({amount_cents} centavos)")
            
            # ‚úÖ PRODU√á√ÉO: Preparar dados do cliente (com fallback funcional se n√£o fornecidos)
            if not customer_data:
                logger.warning("‚ö†Ô∏è Paradise: customer_data n√£o fornecido, usando fallback")
                customer_data = {}
            
            # ‚úÖ CORRE√á√ÉO CR√çTICA: Validar e corrigir dados do cliente
            customer_payload = {
                "name": customer_data.get('name') or description[:30] if description else 'Cliente Digital',
                "email": customer_data.get('email') or f"pix{payment_id}@bot.digital",
                "phone": self._validate_phone(customer_data.get('phone') or '11999999999'),
                "document": self._validate_document(customer_data.get('document') or random.choice(VALID_CPFS))
            }
            
            logger.info(f"üë§ Paradise: Cliente - {customer_payload['name']} | {customer_payload['email']}")
            logger.info(f"üîó Paradise: Webhook URL - {self.get_webhook_url()}")
            logger.info(f"üîó Paradise: Checkout URL - {self._get_dynamic_checkout_url(payment_id)}")
            
            # ‚úÖ NOVA API V30: Payload atualizado baseado no paradise.php
            # ‚úÖ CORRE√á√ÉO CR√çTICA: Reference deve ser √∫nico e v√°lido (sem caracteres especiais problem√°ticos)
            # Limitar tamanho e garantir unicidade
            # IMPORTANTE: Paradise pode gerar seu pr√≥prio ID baseado no reference
            # Usar payment_id diretamente (j√° √© √∫nico: BOT{bot_id}_{timestamp}_{uuid})
            # ‚úÖ CR√çTICO: Garantir que reference SEMPRE seja √∫nico (adicionar timestamp se necess√°rio)
            safe_reference = str(payment_id).replace('_', '-').replace(' ', '')[:50]  # Max 50 chars, substituir _ por -
            
            # ‚úÖ VALIDA√á√ÉO: Verificar se reference n√£o est√° vazio
            if not safe_reference or len(safe_reference.strip()) == 0:
                logger.error(f"‚ùå Paradise: Reference inv√°lido (vazio) - payment_id: {payment_id}")
                return None
            
            # ‚úÖ VALIDA√á√ÉO CR√çTICA: Verificar se j√° existe payment com mesmo reference
            # Para evitar duplica√ß√£o na Paradise, garantir que reference nunca seja reutilizado
            from app import db
            from models import Payment
            existing_with_same_reference = Payment.query.filter_by(
                gateway_transaction_hash=safe_reference  # Reference salvo como hash
            ).first()
            
            if existing_with_same_reference and existing_with_same_reference.status == 'pending':
                logger.error(f"‚ùå Paradise: Reference '{safe_reference}' j√° existe e est√° pendente!")
                logger.error(f"   Payment ID existente: {existing_with_same_reference.payment_id}")
                logger.error(f"   Isso n√£o deveria acontecer - payment_id deve ser √∫nico!")
                # ‚úÖ CORRE√á√ÉO: Adicionar sufixo √∫nico ao reference para for√ßar unicidade
                import time
                safe_reference = f"{safe_reference}_{int(time.time())}"
                logger.warning(f"‚ö†Ô∏è Reference corrigido para garantir unicidade: {safe_reference}")
            
            payload = {
                "amount": amount_cents,  # ‚úÖ CENTAVOS
                "description": (description[:100] if len(description) > 100 else description) or "Pagamento",  # ‚úÖ Limitar descri√ß√£o
                "reference": safe_reference,  # ‚úÖ Reference seguro e √∫nico
                "checkoutUrl": self._get_dynamic_checkout_url(payment_id),  # ‚úÖ URL DIN√ÇMICA
                "webhookUrl": self.get_webhook_url(),  # ‚úÖ WEBHOOK URL
                "productHash": self.product_hash,  # ‚úÖ OBRIGAT√ìRIO
                "customer": customer_payload  # ‚úÖ DADOS REAIS DO CLIENTE
            }
            
            # ‚úÖ VALIDA√á√ÉO CR√çTICA: Verificar se productHash est√° configurado
            if not self.product_hash or not self.product_hash.startswith('prod_'):
                logger.error(f"‚ùå Paradise: productHash inv√°lido ou n√£o configurado: {self.product_hash}")
                return None
            
            # ‚úÖ CORRE√á√ÉO CR√çTICA: N√ÉO enviar offerHash para Paradise API
            # O offerHash no paradise.json √© o hash da oferta, n√£o deve ser enviado como par√¢metro
            # Enviar offerHash pode causar IDs duplicados na Paradise
            # Se offerHash foi configurado, adiciona apenas se explicitamente necess√°rio
            if self.offer_hash:
                # ‚ö†Ô∏è DESABILITADO: offerHash causa IDs duplicados na Paradise
                # payload["offerHash"] = self.offer_hash
                logger.info(f"‚ö†Ô∏è Paradise: offerHash ignorado ({self.offer_hash}) para evitar duplica√ß√£o")
            
            # ‚úÖ CORRE√á√ÉO CR√çTICA: ADICIONAR SPLIT PAYMENT
            if self.store_id and self.split_percentage and self.split_percentage > 0:
                # Validar split_percentage
                if not isinstance(self.split_percentage, (int, float)) or self.split_percentage <= 0:
                    logger.error(f"‚ùå Paradise: split_percentage inv√°lido: {self.split_percentage}")
                    return None
                
                # Log do split para debug
                logger.info(f"üí∞ Paradise Split: {self.split_percentage}% configurado")
                
                # ‚úÖ CORRE√á√ÉO CR√çTICA: Para valores muito pequenos, n√£o aplicar split
                if amount_cents < 10:  # Menos de R$ 0,10
                    logger.warning(f"‚ö†Ô∏è Paradise: Valor muito pequeno (R$ {amount:.2f}), n√£o aplicando split")
                    # N√£o adiciona split para valores muito pequenos
                else:
                    split_amount_cents = int(amount_cents * (self.split_percentage / 100))
                    
                    # Validar m√≠nimo de 1 centavo para split
                    if split_amount_cents < 1:
                        split_amount_cents = 1
                    
                    # Garantir que sobra pelo menos 1 centavo para o vendedor
                    seller_amount_cents = amount_cents - split_amount_cents
                    if seller_amount_cents < 1:
                        logger.warning(f"‚ö†Ô∏è Paradise: Split deixaria menos de 1 centavo para vendedor. Ajustando...")
                        split_amount_cents = amount_cents - 1
                    
                    payload["split"] = {
                        "store_id": self.store_id,
                        "amount": split_amount_cents
                    }
                    
                    logger.info(f"üí∞ Paradise Split: {split_amount_cents} centavos ({self.split_percentage}%) para store {self.store_id}")
            
            # ‚úÖ LOG DETALHADO para debug
            logger.info(f"üì§ Paradise Payload: {payload}")
            
            # Headers Paradise (X-API-Key)
            headers = {
                'Content-Type': 'application/json',
                'Accept': 'application/json',
                'X-API-Key': self.api_key  # ‚úÖ AUTENTICA√á√ÉO
            }
            
            logger.info(f"üì§ Paradise URL: {self.transaction_url}")
            logger.info(f"üì§ Paradise Headers: Content-Type=application/json, X-API-Key={self.api_key[:10]}...")
            
            # Requisi√ß√£o para Paradise
            response = requests.post(
                self.transaction_url,
                json=payload,
                headers=headers,
                timeout=15
            )
            
            logger.info(f"üì° Paradise Response: Status {response.status_code}")
            logger.info(f"üì° Paradise Response Body: {response.text}")
            
            # ‚úÖ VALIDA√á√ÉO CR√çTICA: Status code pode ser 200 mas ter erro no JSON
            if response.status_code != 200:
                logger.error(f"‚ùå Paradise API Error: {response.status_code}")
                logger.error(f"‚ùå Response: {response.text}")
                return None
            
            # ‚úÖ CORRE√á√ÉO CR√çTICA: Verificar se response.text cont√©m erro mesmo com 200
            if 'error' in response.text.lower() or '"status":"error"' in response.text.lower():
                logger.error(f"‚ùå Paradise: Resposta cont√©m erro mesmo com status 200")
                logger.error(f"‚ùå Response: {response.text}")
                return None
            
            # ‚úÖ CORRE√á√ÉO CR√çTICA: Verificar se resposta √© JSON v√°lido
            try:
                data = response.json()
            except ValueError as e:
                logger.error(f"‚ùå Paradise: Resposta n√£o √© JSON v√°lido: {e}")
                logger.error(f"‚ùå Response body: {response.text}")
                return None
            
            logger.info(f"üì• Paradise CREATE Response: {data}")
            
            # ‚úÖ VALIDA√á√ÉO CR√çTICA: Verificar se status √© realmente "success"
            response_status = data.get('status', '').lower()
            if response_status != 'success':
                logger.error(f"‚ùå Paradise: Status n√£o √© 'success' - recebido: '{response_status}'")
                logger.error(f"‚ùå Response completa: {data}")
                return None
            
            # ‚úÖ VALIDA√á√ÉO CR√çTICA: Verificar se h√° erro na resposta
            if 'error' in data:
                logger.error(f"‚ùå Paradise: Erro na resposta: {data.get('error')}")
                logger.error(f"‚ùå Response completa: {data}")
                return None
            
            # ‚úÖ CORRE√á√ÉO CR√çTICA: Paradise retorna estrutura DIRETA, n√£o aninhada
            # Resposta real: {"status": "success", "transaction_id": "145732", "qr_code": "...", "id": "TEST-1"}
            # N√ÉO √©: {"transaction": {"id": "145732", "qr_code": "..."}}
            
            # ‚úÖ CORRE√á√ÉO CR√çTICA: Usar dados diretamente da resposta
            pix_code = data.get('qr_code')  # ‚úÖ Campo direto: qr_code
            # ‚úÖ CORRE√á√ÉO DEFINITIVA: Paradise retorna 'id' como identificador do painel e 'transaction_id' como ID num√©rico
            # O campo 'id' √© o que aparece no painel Paradise, ent√£o deve ser o hash principal
            transaction_id = data.get('transaction_id')  # ID num√©rico (ex: 151299)
            paradise_id = data.get('id')  # ID do painel (ex: "BOT-BOT5_1761860711_cf29c4f3")
            # ‚úÖ CORRE√á√ÉO CR√çTICA: Usar 'id' como hash principal (√© o que aparece no painel)
            transaction_hash = data.get('hash') or paradise_id or transaction_id  # ‚úÖ Prioridade: hash > id > transaction_id
            qr_code_base64 = data.get('qr_code_base64')  # ‚úÖ QR Code em base64
            
            # ‚úÖ Se n√£o temos transaction_id mas temos id, usar id como transaction_id tamb√©m
            if not transaction_id and paradise_id:
                transaction_id = paradise_id
            
            # ‚úÖ Se ainda n√£o temos transaction_id, usar hash como fallback
            if not transaction_id:
                transaction_id = transaction_hash
            
            logger.info(f"üì• Paradise Response Data: {data}")
            logger.info(f"üì• Paradise PIX Code: {pix_code[:50] if pix_code else None}...")
            logger.info(f"üì• Paradise Transaction ID (num√©rico): {transaction_id}")
            logger.info(f"üì• Paradise ID (painel): {paradise_id}")
            logger.info(f"üì• Paradise Transaction Hash (usado para consulta): {transaction_hash}")
            
            # ‚úÖ VALIDA√á√ÉO RIGOROSA: Pix code √© OBRIGAT√ìRIO
            if not pix_code:
                logger.error(f"‚ùå Paradise: qr_code ausente na resposta - transa√ß√£o N√ÉO criada no painel!")
                logger.error(f"‚ùå Response completa: {data}")
                return None
            
            # ‚úÖ VALIDA√á√ÉO: Ao menos um identificador (transaction_id ou hash) deve existir
            if not transaction_id and not transaction_hash:
                logger.error(f"‚ùå Paradise: Nenhum identificador retornado (transaction_id ou id ausentes) - transa√ß√£o N√ÉO criada no painel!")
                logger.error(f"‚ùå Response completa: {data}")
                return None
            
            # ‚úÖ Se n√£o temos hash mas temos transaction_id, usar transaction_id como hash
            if not transaction_hash and transaction_id:
                transaction_hash = transaction_id
            
            # ‚úÖ VALIDA√á√ÉO FINAL: Verificar se qr_code √© v√°lido (come√ßa com 000201 para PIX)
            if not pix_code.startswith('000201'):
                logger.warning(f"‚ö†Ô∏è Paradise: qr_code n√£o parece v√°lido (n√£o come√ßa com 000201): {pix_code[:20]}...")
            
            # ‚úÖ LOG CR√çTICO: Informa√ß√µes para debug
            logger.info(f"‚úÖ Paradise: PIX gerado com SUCESSO")
            logger.info(f"   Transaction ID (num√©rico): {transaction_id}")
            logger.info(f"   Paradise ID (aparece no painel): {paradise_id or 'N/A'}")
            logger.info(f"   Transaction Hash (usado para consulta): {transaction_hash}")
            logger.info(f"   Reference enviado: {safe_reference}")
            logger.info(f"   Product Hash: {self.product_hash}")
            logger.info(f"   QR Code v√°lido: {'‚úÖ' if pix_code.startswith('000201') else '‚ö†Ô∏è'}")
            
            # ‚úÖ ALERTA: Se o ID retornado √© diferente do reference, pode n√£o aparecer no painel
            if paradise_id and paradise_id != safe_reference:
                logger.warning(f"‚ö†Ô∏è Paradise gerou ID diferente do reference enviado!")
                logger.warning(f"   Reference enviado: {safe_reference}")
                logger.warning(f"   ID retornado: {paradise_id}")
                logger.warning(f"   üí° Use o ID retornado ({paradise_id}) para verificar no painel Paradise")
            else:
                logger.info(f"   ‚úÖ Reference e ID coincidem - transa√ß√£o deve aparecer no painel")
            
            # Retorna padr√£o unificado
            return {
                'pix_code': pix_code,  # ‚úÖ Padronizado
                'qr_code_url': qr_code_base64 if qr_code_base64 else f'https://api.qrserver.com/v1/create-qr-code/?size=300x300&data={pix_code}',
                'transaction_id': transaction_id,  # ‚úÖ Convertido de 'id'
                'transaction_hash': transaction_hash,  # ‚úÖ Hash para consulta de status
                'payment_id': payment_id
            }
            
        except requests.Timeout:
            logger.error("‚ùå Paradise: Timeout na requisi√ß√£o (15s)")
            return None
        except requests.RequestException as e:
            logger.error(f"‚ùå Paradise: Erro de conex√£o: {e}")
            return None
        except Exception as e:
            logger.error(f"‚ùå Paradise: Erro inesperado: {e}", exc_info=True)
            return None
    
    def process_webhook(self, data: Dict) -> Optional[Dict]:
        """
        Processa webhook do Paradise
        
        Paradise envia:
        {
            "id": "transaction_id",
            "payment_status": "paid" | "pending" | "refunded",
            "amount": 1990  # centavos
        }
        
        Returns:
            Dict com payment_id, status, amount, gateway_transaction_id
        """
        try:
            logger.info(f"üì© Paradise Webhook/Status recebido")
            logger.info(f"üì© Data completa: {data}")
            
            # Extrai transaction_id (pode vir como 'transaction_id', 'id' ou 'hash')
            transaction_id = data.get('transaction_id') or data.get('id') or data.get('hash')
            logger.info(f"üîç Transaction ID extra√≠do: {transaction_id}")
            
            if not transaction_id:
                logger.error(f"‚ùå Paradise: 'id'/'hash' ausente | Data recebida: {data}")
                return None
            
            # Extrai status
            # Paradise pode enviar: 'status' (approved|pending|refunded) ou 'payment_status'
            status = (data.get('status') or data.get('payment_status') or '').lower()
            logger.info(f"üîç Status bruto: {status}")
            
            # Extrai valor
            amount_cents = data.get('amount_paid') or data.get('amount')
            logger.info(f"üîç Amount (centavos): {amount_cents}")
            
            # Converte centavos para reais
            amount = amount_cents / 100 if amount_cents else 0
            
            # Mapeia status Paradise ‚Üí Sistema
            # Paradise envia: approved, pending, refunded
            mapped_status = 'pending'
            if status == 'approved':  # ‚úÖ Paradise envia "approved", n√£o "paid"!
                mapped_status = 'paid'
            elif status == 'refunded':
                mapped_status = 'failed'
            
            logger.info(f"‚úÖ Paradise processado | ID: {transaction_id} | Status: '{status}' ‚Üí '{mapped_status}' | Amount: R$ {amount:.2f}")
            
            return {
                'gateway_transaction_id': transaction_id,
                'status': mapped_status,
                'amount': amount
            }
            
        except Exception as e:
            logger.error(f"‚ùå Paradise: Erro ao processar webhook: {e}", exc_info=True)
            return None
    
    def get_payment_status(self, transaction_id: str) -> Optional[Dict]:
        """
        Consulta status de um pagamento no Paradise (API V30)
        Aceita: hash, id (painel) ou transaction_id (num√©rico)
        Retorna dict padronizado: { 'gateway_transaction_id', 'status', 'amount' }
        """
        try:
            if not transaction_id:
                logger.error("‚ùå Paradise: hash/id vazio na consulta de status")
                return None
            
            # ‚úÖ CORRE√á√ÉO: Paradise aceita 'hash' como par√¢metro (pode ser id ou hash real)
            # Tentar primeiro com hash/id (que √© o que aparece no painel)
            params = { 'hash': str(transaction_id) }
            headers = {
                'Accept': 'application/json',
                'X-API-Key': self.api_key
            }
            
            # ‚úÖ LOG para debug
            logger.debug(f"üîç Paradise: Consultando status com hash/id: {transaction_id}")
            
            # Paradise aceita GET em check_status.php
            resp = requests.get(self.check_status_url, params=params, headers=headers, timeout=15)
            
            # ‚úÖ Log de erro
            if resp.status_code != 200:
                logger.warning(f"‚ö†Ô∏è Paradise CHECK {resp.status_code}: {resp.text[:200]}")
                return None
            
            try:
                data = resp.json()
            except ValueError:
                logger.warning(f"‚ö†Ô∏è Paradise: Resposta n√£o √© JSON v√°lido: {resp.text[:200]}")
                return None

            # ‚úÖ VALIDA√á√ÉO: Verificar se resposta cont√©m erro
            if data.get('error') or data.get('status') == 'error':
                logger.warning(f"‚ö†Ô∏è Paradise: Erro na resposta: {data.get('error', data.get('message', 'Erro desconhecido'))}")
                return None

            # Campos poss√≠veis: status/payment_status, transaction_id/id/hash, amount/amount_paid
            raw_status = (data.get('status') or data.get('payment_status') or '').lower()
            mapped_status = 'pending'
            if raw_status == 'approved':
                mapped_status = 'paid'
            elif raw_status == 'refunded':
                mapped_status = 'failed'

            amount_cents = data.get('amount_paid') or data.get('amount')
            amount = (amount_cents / 100.0) if isinstance(amount_cents, (int, float)) else None

            tx_id = data.get('transaction_id') or data.get('id') or data.get('hash') or str(transaction_id)

            # ‚úÖ Log de status (sempre para debug)
            logger.debug(f"üîç Paradise Status: {raw_status} ‚Üí {mapped_status} | Amount: {amount} | TX ID: {tx_id}")

            return {
                'gateway_transaction_id': str(tx_id),
                'status': mapped_status,
                'amount': amount
            }

        except requests.Timeout:
            logger.error("‚ùå Paradise: Timeout na consulta de status (15s)")
            return None
        except requests.RequestException as e:
            logger.error(f"‚ùå Paradise: Erro de conex√£o na consulta de status: {e}")
            return None
        except Exception as e:
            logger.error(f"‚ùå Paradise: Erro inesperado na consulta de status: {e}", exc_info=True)
            return None
    
    def validate_amount(self, amount: float) -> bool:
        """Valida se o valor est√° dentro dos limites aceitos pelo Paradise"""
        amount_cents = int(amount * 100)
        
        if amount_cents < 1:  # R$ 0,01 m√≠nimo
            logger.error(f"‚ùå Paradise: Valor m√≠nimo √© R$ 0,01")
            return False
        
        # Paradise n√£o especifica limite m√°ximo na documenta√ß√£o
        # Mas √© prudente ter um limite razo√°vel
        if amount_cents > 100000000:  # R$ 1.000.000,00
            logger.error(f"‚ùå Paradise: Valor m√°ximo √© R$ 1.000.000,00")
            return False
        
        return True


